What is Docker?
Docker is an open-source platform that enables developers to package, distribute, and run applications in isolated environments called containers.
Container: A runtime instance of a Docker image. 
Image: A read-only template that contains the application and its dependencies. Images are used to create containers.
Docker Engine: The core component that runs containers. It includes the Docker daemon, CLI, and runtime.
To build the image:

docker build -t my-python-app .

To run a container from the image:
docker run -d -p 80:80 my-python-app
Why Use Docker?
Portability: Docker containers can run on any system that has Docker installed, ensuring consistency across development, testing, and production environments.
Scalability: Docker supports scaling applications horizontally by running multiple containers.
Efficiency: Containers are lightweight and start quickly compared to virtual machines.
Docker Terminology: Containers, Images, and More
Container: A running instance of a Docker image.
Image: A read-only template used to create containers.
Dockerfile: A text document that contains all the commands
Docker Daemon: The background service running on the host that manages
Docker Client: The command-line tool that allows users to interact with the Docker daemon.
Docker Registry: A repository for Docker images. Docker Hub is a public registry, while private registries can be set up for internal use.
 Docker Architecture Overview
Docker uses a client-server architecture. The Docker client communicates with the Docker daemon
Components:

Docker Client: The command-line interface (CLI) that users interact with.
Docker Daemon: The background service that processes API requests from the client.
Docker Registry: Stores and distributes Docker images.
Docker Objects: Containers, images, networks, and volumes.

Chapter 3: Docker CLI Basics
The Docker Command Line Interface (CLI) is the primary tool for interacting with the Docker daemon.
Docker CLI: The command-line interface for Docker.
Docker Daemon: The background service that processes API requests from the Docker CLI.
Docker Commands: Commands used to interact with Docker objects (e.g., docker run, docker build).
Basic Docker Commands
docker run: Create and start a container from an image.
docker ps: List running containers.
docker stop: Stop a running container.
docker rm: Remove a container.
docker images: List available images.
docker rmi: Remove an image.
Running Your First Container
Running a container involves creating a container from an image and starting it. The docker run command is used for this purpose.

Key Concepts:

Image: A read-only template used to create containers.
Container: A runtime instance of an image.
docker run: Command to create and start a container.
docker start: Start a stopped container.
docker stop: Stop a running container.
docker restart: Restart a container.
docker rm: Remove a container.
docker inspect: Get detailed information about a container
-------------------------------------------------------------------------
Chapter 4: Docker Images

Key Concepts:

Base Image: An image that has no parent image, usually containing the operating system.
Layer: Each instruction in a Dockerfile creates a new layer in the image.
Repository: A collection of related Docker images, often with different tags.
Tag: A label applied to an image to identify it, often indicating a version.

docker pull python:3.9-slim
This command pulls a Python base image tagged 3.9-slim from Docker Hub.

 Creating Your Own Docker Images:

  own Docker images involves writing a Dockerfile
  Key Concepts:

Dockerfile: A text file containing instructions for building a Docker image.
FROM: Specifies the base image.
RUN: Executes commands in a new layer on top of the current image.
COPY: Copies new files or directories into the image.
CMD: Provides defaults for an executing container.
Practical Example:
Create a Dockerfile for a simple Node.js application:

# Use an official Node.js runtime as a parent image
FROM node:14
# Set the working directory in the container
WORKDIR /app
# Copy the current directory contents into the container at /app
COPY . /app
# Install any needed packages specified in package.json
RUN npm install
# Make port 3000 available to the world outside this container
EXPOSE 3000
# Define environment variable
ENV NAME World
# Run app.js when the container launches
CMD ["node", "app.js"]

 Dockerfile Basics:

 Each instruction in a Dockerfile creates a new layer in the image.

Key Concepts:

FROM: Specifies the base image.
WORKDIR: Sets the working directory for subsequent instructions.
COPY: Copies files or directories into the container.
RUN: Executes commands in a new layer.
CMD: Specifies the default command to run when the container starts.

Hereâ€™s a simple Dockerfile for a Python application:

# Use an official Python runtime as a parent image
FROM python:3.9-slim
# Set the working directory in the container
WORKDIR /app
# Copy the current directory contents into the container at /app
COPY . /app
# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt
# Make port 80 available to the world outside this container
EXPOSE 80
# Define environment variable
ENV NAME World
# Run app.py when the container launches
CMD ["python", "app.py"]

Best Practices for Writing Dockerfiles:

Key Concepts:

Minimize Layers: Combine commands to reduce the number of layers.
Use .dockerignore: Exclude unnecessary files and directories from the build context.
Avoid Latest Tag: Use specific version tags to avoid unexpected changes.
Use Multi-Stage Builds: Separate build and runtime stages to create smaller images.

Building and Tagging Images
Building an image involves converting a Dockerfile into a Docker image. Tagging helps identify and version your images.

Key Concepts:

docker build: Command to build an image from a Dockerfile.
Tag: A label applied to an image to identify it, often indicating a version.
Repository: A collection of related Docker images.

Build an image from a Dockerfile and tag it:

docker build -t my-python-app:1.0 .
Explanation:

docker build: Command to build the image.
-t my-python-app:1.0: Tags the image with the name my-python-app and version 1.0.
.: Specifies the build context (current directory).
To list the built image:

docker images


